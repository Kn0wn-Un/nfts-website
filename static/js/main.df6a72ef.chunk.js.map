{"version":3,"sources":["NeonSunExample.jsx","assets/twitter-logo.svg","App.jsx","index.jsx"],"names":["NeonSunExample","props","width","height","xmlns","style","backgroundColor","marginTop","id","x1","y1","x2","y2","stopColor","stopOpacity","offset","x","y","in","stdDeviation","fill","filter","d","opacity","stroke","strokeWidth","fontSize","fontFamily","xmlSpace","TWITTER_HANDLE","TWITTER_LINK","App","CONTRACT_ADDRESS","useState","currentAccount","setCurrentAccount","totalSupply","setTotalSupply","userNftToken","setUserNFt","isMinting","setIsMinting","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","chainId","setupEventListener","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","on","from","tokenId","toNumber","ts","error","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","getInitialDetails","getUserNft","userNFT","useEffect","className","onClick","href","disabled","alt","src","twitterLogo","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df6a72ef.chunk.js","sourcesContent":["import * as React from \"react\";\n\nconst NeonSunExample = (props) => (\n  <svg\n    width={300}\n    height={250}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    style={{\n      backgroundColor: \"#000\",\n      marginTop: '20px',\n    }}\n    {...props}\n  >\n    <defs>\n      <linearGradient id=\"c\" x1={0} y1={0} x2={1} y2={1}>\n        <stop stopColor=\"#f0f\" stopOpacity={0.996} offset={0} />\n        <stop stopColor=\"#00f\" stopOpacity={0.996} offset={1} />\n      </linearGradient>\n      <linearGradient id=\"a\" x1={0} y1={0} x2={1} y2={1}>\n        <stop stopColor=\"#f0f\" offset={0} />\n        <stop stopColor=\"#00f\" stopOpacity={0.996} offset={1} />\n        <stop offset={1} stopOpacity={0.988} />\n        <stop stopColor={0} stopOpacity={0} offset=\"NaN\" />\n        <stop stopColor={0} stopOpacity={0} offset=\"NaN\" />\n      </linearGradient>\n      <filter id=\"b\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n        <feGaussianBlur in=\"SourceGraphic\" stdDeviation={10} />\n      </filter>\n    </defs>\n    <path\n      fill=\"url(#a)\"\n      filter=\"url(#b)\"\n      d=\"M150 244c-69.06 0-125-55.94-125-125S80.94-6 150-6s125 55.94 125 125-55.94 125-125 125z\"\n      opacity={0.35}\n    />\n    <path\n      fill=\"url(#c)\"\n      opacity=\"undefined\"\n      d=\"M150 214c-49.724 0-90-40.276-90-90s40.276-90 90-90 90 40.276 90 90-40.276 90-90 90z\"\n    />\n    <path\n      fill=\"none\"\n      stroke=\"#000\"\n      d=\"M0 150h300M0 160h300M0 170h300M0 180h300M0 190h300M0 200h300M0 210h300\"\n    />\n    <text\n      fill=\"#fff\"\n      stroke=\"#000\"\n      strokeWidth={0}\n      x={235}\n      y={250}\n      fontSize={18}\n      fontFamily=\"Caveat\"\n      xmlSpace=\"preserve\"\n    />\n  </svg>\n);\n\nexport default NeonSunExample;","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useState, useEffect } from 'react';\nimport './styles/App.css';\nimport NeonSunImg from './NeonSunExample';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from 'ethers';\nimport myEpicNft from './utils/MyEpicNFT.json';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\tconst CONTRACT_ADDRESS = '0x143D8df80210DcAB1c31647bEaa07Bd54B0589a8';\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\tconst [totalSupply, setTotalSupply] = useState(0);\n\tconst [userNftToken, setUserNFt] = useState(0);\n\tconst [isMinting, setIsMinting] = useState(false);\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\t/*\n\t\t * First make sure we have access to window.ethereum\n\t\t */\n\t\tconst { ethereum } = window;\n\n\t\tif (!ethereum) {\n\t\t\tconsole.log('Make sure you have metamask!');\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log('We have the ethereum object', ethereum);\n\t\t}\n\t\t/*\n\t\t * Check if we're authorized to access the user's wallet\n\t\t */\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\t/*\n\t\t * User can have multiple authorized accounts, we grab the first one if its there!\n\t\t */\n\t\tif (accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\tsetCurrentAccount(account);\n\t\t} else {\n\t\t\tconsole.log('No authorized account found');\n\t\t}\n\t};\n\n\t// Render Methods\n\tconst renderNotConnectedContainer = () => (\n\t\t<button\n\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t\tonClick={connectWallet}\n\t\t>\n\t\t\tConnect to Wallet\n\t\t</button>\n\t);\n\n\t/*\n\t * Implement your connectWallet method here\n\t */\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (!ethereum) {\n\t\t\t\talert('Get MetaMask!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Fancy method to request access to account.\n\t\t\t */\n\t\t\tconst accounts = await ethereum.request({\n\t\t\t\tmethod: 'eth_requestAccounts',\n\t\t\t});\n\n\t\t\t/*\n\t\t\t * Boom! This should print out public address once we authorize Metamask.\n\t\t\t */\n\t\t\tconsole.log('Connected', accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\n\t\t\tlet chainId = await ethereum.request({ method: 'eth_chainId' });\n\t\t\tconsole.log('Connected to chain ' + chainId);\n\n\t\t\t// String, hex code of the chainId of the Rinkebey test network\n\t\t\tconst rinkebyChainId = '0x4';\n\t\t\tif (chainId !== rinkebyChainId) {\n\t\t\t\talert('You are not connected to the Rinkeby Test Network!');\n\t\t\t}\n\n\t\t\tsetupEventListener();\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\t// Setup our listener.\n\tconst setupEventListener = async () => {\n\t\t// Most of this looks the same as our function askContractToMintNft\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\t// Same stuff again\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNft.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\t// THIS IS THE MAGIC SAUCE.\n\t\t\t\t// This will essentially \"capture\" our event when our contract throws it.\n\t\t\t\t// If you're familiar with webhooks, it's very similar to that!\n\t\t\t\tconnectedContract.on('NewEpicNFTMinted', async (from, tokenId) => {\n\t\t\t\t\tconsole.log(from, tokenId.toNumber());\n\t\t\t\t\tconst ts = await connectedContract.totalSupply();\n\t\t\t\t\tsetTotalSupply(ts.toNumber());\n\t\t\t\t\tsetIsMinting(false);\n\t\t\t\t\tsetUserNFt(tokenId.toNumber());\n\t\t\t\t\talert(\n\t\t\t\t\t\t`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tconsole.log('Setup event listener!');\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst askContractToMintNft = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNft.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\tconsole.log('Going to pop wallet now to pay gas...');\n\t\t\t\tlet nftTxn = await connectedContract.makeAnEpicNFT();\n\n\t\t\t\tsetIsMinting(true);\n\t\t\t\tconsole.log('Mining...please wait.');\n\t\t\t\tawait nftTxn.wait();\n\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst getInitialDetails = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\n\t\t\tif (ethereum) {\n\t\t\t\t// Same stuff again\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst connectedContract = new ethers.Contract(\n\t\t\t\t\tCONTRACT_ADDRESS,\n\t\t\t\t\tmyEpicNft.abi,\n\t\t\t\t\tsigner\n\t\t\t\t);\n\n\t\t\t\tconst ts = await connectedContract.totalSupply();\n\t\t\t\tsetTotalSupply(ts.toNumber());\n\n\t\t\t\tconst userNFT = await connectedContract.getUserNft();\n\t\t\t\tif (userNFT.toNumber()) {\n\t\t\t\t\tsetUserNFt(userNFT.toNumber());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Ethereum object doesn't exist!\");\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\t/*\n\t * This runs our function when the page loads.\n\t */\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t\tgetInitialDetails();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tgetInitialDetails();\n\t}, [currentAccount]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<p className=\"header gradient-text\">Neon Sun NFT Collection</p>\n\t\t\t\t\t<NeonSunImg />\n\t\t\t\t\t<div className=\"sub-text\">\n\t\t\t\t\t\tEach unique. Each beautiful. Discover your NFT today.\n\t\t\t\t\t\t<div>{totalSupply} out of 50 NFTs minted!</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{currentAccount === '' ? (\n\t\t\t\t\t\trenderNotConnectedContainer()\n\t\t\t\t\t) : userNftToken ? (\n\t\t\t\t\t\t<div className=\"sub-text\">\n\t\t\t\t\t\t\tCongratulations, you own an Neon Sun NFT!{' '}\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\thref={`https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${userNftToken}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t🌊 View Collection on OpenSea\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t(It may take a while)\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={askContractToMintNft}\n\t\t\t\t\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t\t\t\t\t\tdisabled={userNftToken}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isMinting ? 'Minting...(may take some time)' : 'Mint NFT'}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`built on @${TWITTER_HANDLE}`}</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref=\"https://github.com/Kn0wn-Un\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\tby Kn0wn-Un\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}